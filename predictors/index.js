const fs = require('fs');
const path = require('path');

// ƒê·∫£m b·∫£o c√≥ bi·∫øn dirname
const dirname = __dirname;

const predictor = require('./predictor');
const account = require('./account');
const logger = require('./logger');
const betting = require('./betting');
const drawIdModule = require('./drawId');
const config = require('./config');
const adaptivePattern = require('./adaptivePattern');
const betBreaker = require('./betBreaker');
const adaptiveLearning = require('./adaptiveLearning');
const timeAnalysis = require('./timeAnalysis');

const {
    detectCyclicalReversals,
    detectShortAlternatingPattern,
    detectLongStreaks,
    detectFastPattern,
    detectTimeBasedPattern,
    advancedCombinationPattern,
    generateNumbers,
} = predictor;

const { 
    detectAdaptivePattern, 
    updateRecentPredictions, 
} = adaptivePattern;

// Ph∆∞∆°ng th·ª©c m·ªõi t·ª´ adaptiveLearning
const {
    predictFromPatterns,
    analyzeStatisticalPatterns,
    detectSpecialEvents,
    updatePatternPerformance,
    calculateRecentAccuracy
} = adaptiveLearning;

// Ph∆∞∆°ng th·ª©c m·ªõi t·ª´ timeAnalysis
const {
    predictFromTimeAnalysis,
    isDifficultPeriod,
    getCurrentTimeSegment
} = timeAnalysis;

const { clearPageMemory } = require('../betAutomatic');
let isLoggedIn = false;

// Th√™m bi·∫øn to√†n c·ª•c ƒë·ªÉ theo d√µi hi·ªáu su·∫•t m·ªôt c√°ch ƒë∆°n gi·∫£n
let methodPerformanceCache = {};

// Bi·∫øn l∆∞u tr·ªØ d·ª± ƒëo√°n g·∫ßn ƒë√¢y nh·∫•t
let lastPredictionData = {
    prediction: null,
    confidence: 0,
    timestamp: 0
};

// Th√™m h√†m ƒë·ªÉ c·∫≠p nh·∫≠t hi·ªáu su·∫•t trong b·ªô nh·ªõ (kh√¥ng l∆∞u file)
function updateMethodPerformance(method, isCorrect) {
    if (!methodPerformanceCache[method]) {
        methodPerformanceCache[method] = { correct: 0, total: 0 };
    }
    
    methodPerformanceCache[method].total++;
    if (isCorrect) {
        methodPerformanceCache[method].correct++;
    }
    
    // Gi·ªõi h·∫°n s·ªë li·ªáu th·ªëng k√™ ·ªü 50 k·ª≥ g·∫ßn nh·∫•t
    if (methodPerformanceCache[method].total > 50) {
        const ratio = 50 / methodPerformanceCache[method].total;
        methodPerformanceCache[method].total = 50;
        methodPerformanceCache[method].correct = Math.round(methodPerformanceCache[method].correct * ratio);
    }
}

/**
 * L·∫•y t·ª∑ l·ªá th√†nh c√¥ng c·ªßa m·ªôt ph∆∞∆°ng ph√°p
 * @param {string} method - T√™n ph∆∞∆°ng ph√°p
 * @returns {number} T·ª∑ l·ªá th√†nh c√¥ng (0-1)
 */
function getMethodSuccessRate(method) {
    if (!methodPerformanceCache[method] || methodPerformanceCache[method].total === 0) {
        return 0.5; // Gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu
    }
    
    return methodPerformanceCache[method].correct / methodPerformanceCache[method].total;
}

// Thi·∫øt l·∫≠p c√°c h√†m to√†n c·ª•c
if (!global.updateMethodPerformance) {
    global.updateMethodPerformance = updateMethodPerformance;
    console.log("üìä Kh·ªüi t·∫°o global.updateMethodPerformance");
}
if (!global.getMethodSuccessRate) {
    global.getMethodSuccessRate = getMethodSuccessRate;
    console.log("üìä Kh·ªüi t·∫°o global.getMethodSuccessRate");
}
if (!global.methodPerformanceCache) {
    global.methodPerformanceCache = methodPerformanceCache;
    console.log("üìä Kh·ªüi t·∫°o global.methodPerformanceCache");
}

// Ki·ªÉm tra v√† th√™m h√†m getAccountBalance n·∫øu kh√¥ng t·ªìn t·∫°i
if (!betting.getAccountBalance) {
    betting.getAccountBalance = function getAccountBalance() {
        try {
            const dataDir = path.join(__dirname, '..', 'data');
            const accountFile = path.join(dataDir, 'account.json');
            if (fs.existsSync(accountFile)) {
                const accountData = JSON.parse(fs.readFileSync(accountFile, 'utf8'));
                return accountData.betting && accountData.betting.currentBalance !== undefined 
                    ? accountData.betting.currentBalance 
                    : (accountData.betting && accountData.betting.accountBalance) || 0;
            }
            return 0;
        } catch (error) {
            console.error(`‚ùå L·ªói khi ƒë·ªçc s·ªë d∆∞ t√†i kho·∫£n: ${error.message}`);
            return 0;
        }
    };
    console.log("üìä ƒê√£ th√™m h√†m getAccountBalance d·ª± ph√≤ng");
}

/**
 * D·ª± ƒëo√°n T√†i X·ªâu v·ªõi thu·∫≠t to√°n nh·∫≠n d·∫°ng m·∫´u c√¢n b·∫±ng (phi√™n b·∫£n 6.0)
 * @param {Object} page - ƒê·ªëi t∆∞·ª£ng trang web Puppeteer
 * @param {Array} history - M·∫£ng l·ªãch s·ª≠ k·∫øt qu·∫£
 * @param {Number} index - V·ªã tr√≠ trong m·∫£ng numbers c·∫ßn d·ª± ƒëo√°n (m·∫∑c ƒë·ªãnh: 0)
 * @param {Boolean} log - ƒêi·ªÅu khi·ªÉn hi·ªÉn th·ªã/ghi log (m·∫∑c ƒë·ªãnh: true)
 * @returns {Object} ƒê·ªëi t∆∞·ª£ng d·ª± ƒëo√°n
 */
async function predict(page, history, index = 0, log = true) {
    try {
        if (!history || !Array.isArray(history) || history.length === 0) {
            console.error("‚ùå Kh√¥ng th·ªÉ d·ª± ƒëo√°n: Kh√¥ng c√≥ l·ªãch s·ª≠ k·∫øt qu·∫£!");
            return null;
        }
        
        // T·∫°o drawId cho l·∫ßn d·ª± ƒëo√°n n√†y
        const nextDrawId = drawIdModule.generateNextDrawId(history[0].drawId);
        if (!nextDrawId) {
            console.error("‚ùå Kh√¥ng th·ªÉ t·∫°o drawId cho l·∫ßn d·ª± ƒëo√°n ti·∫øp theo!");
            return null;
        }
        
        // Ki·ªÉm tra xem c√≥ d·ª± ƒëo√°n c≈© n√†o ch∆∞a x√°c nh·∫≠n k·∫øt qu·∫£ kh√¥ng
        let oldPrediction = null;
        const predictionFile = path.join(__dirname, '..', 'data', 'predictions.json');
        if (fs.existsSync(predictionFile)) {
            try {
                oldPrediction = JSON.parse(fs.readFileSync(predictionFile, 'utf8'));
                
                // X√°c minh k·∫øt qu·∫£ c·ªßa d·ª± ƒëo√°n c≈©
                if (oldPrediction && oldPrediction.drawId) {
                    const verificationResult = verifyPrediction(oldPrediction, history[0].numbers, log);
                    if (verificationResult) {
                        if (log) console.log(`‚úÖ ƒê√£ x√°c minh k·∫øt qu·∫£ d·ª± ƒëo√°n: DrawID ${oldPrediction.drawId}`);
                    }
                }
            } catch (error) {
                console.error(`‚ùå L·ªói khi ƒë·ªçc file d·ª± ƒëo√°n c≈©: ${error.message}`);
            }
        }
        
        // C·∫≠p nh·∫≠t t·∫•t c·∫£ c√°c d·ª± ƒëo√°n ƒëang ch·ªù k·∫øt qu·∫£
        updateAllPendingPredictions(history, log);
        
        const dataDir = path.join(__dirname, '..', 'data');
        const predictionsFile = path.join(dataDir, 'predictions.json');
        const historyLogFile = path.join(dataDir, 'prediction_log.txt');
        const accountFile = path.join(dataDir, 'account.json');

        const accountInfo = account.readAccountInfo(accountFile, log);
        account.validateAccountSettings(accountInfo, accountFile, log);
        
        if (page) {
            try {
                if (page.isClosed()) {
                    if (log) console.log("‚ö†Ô∏è Trang ƒë√£ b·ªã ƒë√≥ng, kh√¥ng th·ªÉ ti·∫øp t·ª•c");
                    return null;
                }

                await clearPageMemory(page);
            } catch (pageError) {
                if (log) console.error("‚ùå L·ªói khi ki·ªÉm tra trang:", pageError);
                return null;
            }
        }

        const canBet = account.canUseBetting(accountInfo);

        if (page && canBet) {
            const loginSuccess = await account.autoLogin(page, accountInfo, accountFile, log);
            
            if (loginSuccess) {
                isLoggedIn = true;
            } else {
                isLoggedIn = false;
            }
        } else {
            isLoggedIn = false;
        }

        try {
            if (!history || !Array.isArray(history) || history.length === 0) {
                if (log) console.log("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu l·ªãch s·ª≠, kh√¥ng th·ªÉ d·ª± ƒëo√°n");
                return null;
            }
            
            const latestDrawId = history[0].drawId;
            const safeNextDrawId = drawIdModule.calculateSafeNextDrawId(latestDrawId, predictionsFile, historyLogFile);
            
            // Ki·ªÉm tra v√† t·∫°o file d·ª± ƒëo√°n n·∫øu n√≥ ch∆∞a t·ªìn t·∫°i
            if (!fs.existsSync(predictionsFile)) {
                if (log) console.log(`üìÑ File d·ª± ƒëo√°n kh√¥ng t·ªìn t·∫°i, t·∫°o file m·ªõi: ${predictionsFile}`);
                fs.writeFileSync(predictionsFile, '{}', 'utf8');
            }
            
            if (fs.existsSync(predictionsFile)) {
                try {
                    const fileContent = fs.readFileSync(predictionsFile, 'utf8');
                    if (!fileContent || fileContent.trim() === '') {
                        if (log) console.log(`‚ö†Ô∏è File d·ª± ƒëo√°n r·ªóng, t·∫°o d·ª± ƒëo√°n m·ªõi`);
                    } else {
                        const existingPrediction = JSON.parse(fileContent);
                        
                        // Ki·ªÉm tra xem existingPrediction v√† drawId c√≥ t·ªìn t·∫°i kh√¥ng
                        if (existingPrediction && existingPrediction.drawId) {
                            const normalizedExistingDrawId = existingPrediction.drawId.replace(/_\d+$/, '');
                            
                            // Ki·ªÉm tra xem d·ª± ƒëo√°n c√≥ g·∫ßn ƒë√¢y kh√¥ng
                            const isVeryRecentPrediction = (existingPrediction.timestamp && 
                                                            (new Date().getTime() - new Date(existingPrediction.timestamp).getTime()) < 10000);
                                                
                            if (normalizedExistingDrawId === safeNextDrawId && isVeryRecentPrediction) {
                                if (log) console.log(`‚ÑπÔ∏è ƒê√£ c√≥ d·ª± ƒëo√°n R·∫§T G·∫¶N ƒê√ÇY (< 10s) cho k·ª≥ ${safeNextDrawId}, s·ª≠ d·ª•ng d·ª± ƒëo√°n hi·ªán c√≥`);
                                return existingPrediction;
                            } else {
                                if (log) console.log(`‚ÑπÔ∏è T·∫°o d·ª± ƒëo√°n m·ªõi cho k·ª≥ ${safeNextDrawId}`);
                            }
                        } else {
                            if (log) console.log(`‚ö†Ô∏è File d·ª± ƒëo√°n kh√¥ng h·ª£p l·ªá, t·∫°o d·ª± ƒëo√°n m·ªõi`);
                        }
                    }
                } catch (error) {
                    if (log) console.error(`‚ùå L·ªói khi ƒë·ªçc file d·ª± ƒëo√°n: ${error.message}`);
                }
            }

            const recentResults = logger.analyzeRecentResults(historyLogFile, 15);

            if (isLoggedIn && canBet) {
                betting.processPreviousPrediction(predictionsFile, historyLogFile, history, accountInfo, log);
            } else {
                betting.processPreviousPrediction(predictionsFile, historyLogFile, history, null, log);
            }

            // S·ª≠ d·ª•ng c·∫•u h√¨nh t·ª´ config.js
            if (log) console.log(`üìà ƒêang s·ª≠ d·ª•ng c·∫•u h√¨nh phi√™n b·∫£n ${config.version}`);

            // Tr√≠ch xu·∫•t danh s√°ch k·ª≥ t·ª´ l·ªãch s·ª≠
            const historyLimitOverride = config.analysis.historyLimit;
            const historyLimit = historyLimitOverride || config.analysis.historyLimit;
            
            // T·∫°o d·ª± ƒëo√°n b·∫±ng c√°c ph∆∞∆°ng ph√°p kh√°c nhau
            const predictions = [];
            
            // T√≠nh to√°n tr·ªçng s·ªë cho m·ªói ph∆∞∆°ng ph√°p
            const weights = { ...config.defaultWeights };
            
            // T√≠nh s·ªë l·∫ßn thua li√™n ti·∫øp ƒë·ªÉ s·ª≠ d·ª•ng cho nhi·ªÅu ch·ª©c nƒÉng
            const recentLosses = calculateRecentLosses(historyLogFile);
            
            // X√°c ƒë·ªãnh khung gi·ªù hi·ªán t·∫°i
            const currentTimeSegment = getCurrentTimeSegment();
            if (log) console.log(`üïí Khung gi·ªù hi·ªán t·∫°i: ${currentTimeSegment}`);
            
            // Ki·ªÉm tra xem c√≥ ƒëang trong khung gi·ªù kh√≥ khƒÉn kh√¥ng
            const isDifficult = isDifficultPeriod(historyLogFile);
            if (isDifficult && log) {
                console.log(`‚ö†Ô∏è Ph√°t hi·ªán ƒëang trong khung gi·ªù kh√≥ khƒÉn, √°p d·ª•ng chi·∫øn l∆∞·ª£c th·∫≠n tr·ªçng`);
            }
            
            // Thu th·∫≠p d·ª± ƒëo√°n t·ª´ c√°c ph∆∞∆°ng ph√°p c∆° b·∫£n
            const cyclicalResult = detectCyclicalReversals(history, index);
            if (cyclicalResult.confidence > 0) {
                predictions.push({
                    method: "CyclicalPattern",
                    prediction: cyclicalResult.predictTai,
                    confidence: cyclicalResult.confidence,
                    reason: cyclicalResult.reason || "Xu h∆∞·ªõng chu k·ª≥"
                });
            }
            
            const shortAlternatingResult = detectShortAlternatingPattern(history, index);
            if (shortAlternatingResult.confidence > 0) {
                predictions.push({
                    method: "ShortAlternatingPattern",
                    prediction: shortAlternatingResult.predictTai,
                    confidence: shortAlternatingResult.confidence,
                    reason: shortAlternatingResult.reason || "M·∫´u xen k·∫Ω ng·∫Øn"
                });
            }
            
            const longStreaksResult = detectLongStreaks(history, index);
            if (longStreaksResult.confidence > 0) {
                predictions.push({
                    method: "LongStreakPattern",
                    prediction: longStreaksResult.predictTai,
                    confidence: longStreaksResult.confidence,
                    reason: longStreaksResult.reason || "Chu·ªói d√†i"
                });
            }
            
            const fastPatternResult = detectFastPattern(history, index);
            if (fastPatternResult.confidence > 0) {
                predictions.push({
                    method: "FastPatternDetector",
                    prediction: fastPatternResult.predictTai,
                    confidence: fastPatternResult.confidence,
                    reason: fastPatternResult.reason || "M·∫´u nhanh"
                });
            }
            
            const timeBasedResult = detectTimeBasedPattern(history, index);
            if (timeBasedResult.confidence > 0) {
                predictions.push({
                    method: "TimeBasedPattern",
                    prediction: timeBasedResult.predictTai,
                    confidence: timeBasedResult.confidence,
                    reason: timeBasedResult.reason || "M·∫´u theo th·ªùi gian"
                });
            }
            
            const advancedResult = advancedCombinationPattern(history, index);
            if (advancedResult.confidence > 0) {
                predictions.push({
                    method: "AdvancedCombination",
                    prediction: advancedResult.predictTai,
                    confidence: advancedResult.confidence,
                    reason: advancedResult.reason || "K·∫øt h·ª£p n√¢ng cao"
                });
            }
            
            // Th√™m d·ª± ƒëo√°n t·ª´ thu·∫≠t to√°n AdaptivePattern m·ªõi
            const adaptiveResult = detectAdaptivePattern(history, index);
            if (adaptiveResult.confidence > 0) {
                predictions.push({
                    method: adaptiveResult.method || "AdaptivePatternRecognition",
                    prediction: adaptiveResult.predictTai,
                    confidence: adaptiveResult.confidence,
                    reason: adaptiveResult.reason || "Nh·∫≠n d·∫°ng m·∫´u th√≠ch ·ª©ng"
                });
            }

            // Ph√°t hi·ªán chu·ªói b·ªát t√†i/x·ªâu
            const betStreakResult = betBreaker.detectBetStreak(history, index);
            if (betStreakResult.detected) {
                predictions.push({
                    method: betStreakResult.method || "BetBreaker",
                    prediction: betStreakResult.predictTai,
                    confidence: betStreakResult.confidence,
                    reason: betStreakResult.reason || "X·ª≠ l√Ω chu·ªói b·ªát t√†i/x·ªâu"
                });
                
                // N·∫øu ph√°t hi·ªán chu·ªói b·ªát ch·∫Øc ch·∫Øn, tƒÉng ƒë·ªô ∆∞u ti√™n
                if (betStreakResult.streakLength >= config.betDetector.detection.confidentBetLength) {
                    // ∆Øu ti√™n cao h∆°n cho ph∆∞∆°ng ph√°p BetBreaker khi ph√°t hi·ªán chu·ªói b·ªát d√†i
                    weights[betStreakResult.method || "BetBreaker"] = 0.5;
                    
                    if (log) console.log(`üîÑ Ph√°t hi·ªán chu·ªói b·ªát ${betStreakResult.streakType} d√†i ${betStreakResult.streakLength} k·ª≥, ∆∞u ti√™n x·ª≠ l√Ω b·ªát`);
                }
            }

            // Ph√°t hi·ªán v√† theo d√µi chu·ªói b·ªát sau khi thua li√™n ti·∫øp
            const betStreakFollowerResult = betBreaker.detectAndFollowBetStreak(history, recentLosses, index);
            if (betStreakFollowerResult.detected) {
                // Th√™m d·ª± ƒëo√°n theo chu·ªói b·ªát v√†o danh s√°ch
                predictions.push({
                    method: betStreakFollowerResult.method || "BetStreakFollower",
                    prediction: betStreakFollowerResult.predictTai,
                    confidence: betStreakFollowerResult.confidence,
                    reason: betStreakFollowerResult.reason || "Theo d√µi chu·ªói b·ªát t√†i/x·ªâu"
                });
                
                // N·∫øu ƒëang theo d√µi chu·ªói b·ªát, tƒÉng ƒë·ªô ∆∞u ti√™n
                weights[betStreakFollowerResult.method || "BetStreakFollower"] = config.betStreakFollower.priorityWeight;
                
                if (log) {
                    console.log(`üîÑ ${betStreakFollowerResult.reason}`);
                }
            }
            
            // M·ªõi: D·ª± ƒëo√°n t·ª´ ph√¢n t√≠ch m·∫´u h·ªçc m√°y
            const patternLearningResult = predictFromPatterns(history, historyLogFile, index);
            if (patternLearningResult.detected) {
                predictions.push({
                    method: patternLearningResult.method,
                    prediction: patternLearningResult.predictTai,
                    confidence: patternLearningResult.confidence,
                    reason: patternLearningResult.reason
                });
                
                // TƒÉng tr·ªçng s·ªë n·∫øu ph∆∞∆°ng ph√°p h·ªçc m√°y th√≠ch ·ª©ng c√≥ ƒë·ªô tin c·∫≠y cao
                if (patternLearningResult.confidence > 0.8) {
                    weights[patternLearningResult.method] = 0.25;
                    if (log) console.log(`üìä Ph√°t hi·ªán m·∫´u h·ªçc m√°y c√≥ ƒë·ªô tin c·∫≠y cao: ${patternLearningResult.reason}`);
                }
            }
            
            // M·ªõi: Ph√¢n t√≠ch h·ªìi quy th·ªëng k√™
            const statisticalResult = analyzeStatisticalPatterns(history, index);
            if (statisticalResult.detected) {
                predictions.push({
                    method: statisticalResult.method,
                    prediction: statisticalResult.predictTai,
                    confidence: statisticalResult.confidence,
                    reason: statisticalResult.reason
                });
            }
            
            // M·ªõi: Ph√°t hi·ªán s·ª± ki·ªán ƒë·∫∑c bi·ªát
            const specialEventResult = detectSpecialEvents(history, index);
            if (specialEventResult.detected) {
                predictions.push({
                    method: specialEventResult.method,
                    prediction: specialEventResult.predictTai,
                    confidence: specialEventResult.confidence,
                    reason: specialEventResult.reason
                });
                
                // TƒÉng tr·ªçng s·ªë cho ph√°t hi·ªán s·ª± ki·ªán ƒë·∫∑c bi·ªát
                weights[specialEventResult.method] = 0.3;
                if (log) console.log(`üîç Ph√°t hi·ªán s·ª± ki·ªán ƒë·∫∑c bi·ªát: ${specialEventResult.reason}`);
            }
            
            // M·ªõi: D·ª± ƒëo√°n d·ª±a tr√™n ph√¢n t√≠ch th·ªùi gian
            const timeAnalysisResult = predictFromTimeAnalysis(historyLogFile);
            if (timeAnalysisResult.detected) {
                predictions.push({
                    method: timeAnalysisResult.method,
                    prediction: timeAnalysisResult.predictTai,
                    confidence: timeAnalysisResult.confidence,
                    reason: timeAnalysisResult.reason
                });
                
                // TƒÉng tr·ªçng s·ªë cho ph√¢n t√≠ch th·ªùi gian n·∫øu ƒëang trong khung gi·ªù kh√≥ d·ª± ƒëo√°n
                if (isDifficult) {
                    weights[timeAnalysisResult.method] = 0.25;
                    if (log) console.log(`üïí TƒÉng ∆∞u ti√™n cho ph√¢n t√≠ch th·ªùi gian trong khung gi·ªù kh√≥ khƒÉn`);
                }
            }

            // T√≠nh to√°n d·ª± ƒëo√°n cu·ªëi c√πng
            let finalPrediction = null;
            let highestCombinedScore = 0;
            let selectedMethod = "";
            let selectedReason = "";
            
            // ƒêi·ªÅu ch·ªânh ng∆∞·ª°ng tin c·∫≠y theo c·∫•u h√¨nh
            let confidenceThreshold = config.analysis.confidenceThreshold;
            
            // √Åp d·ª•ng ng∆∞·ª°ng tin c·∫≠y ƒë·ªông theo th·ªùi gian n·∫øu ƒë∆∞·ª£c c·∫•u h√¨nh
            if (config.analysis.dynamicThreshold) {
                const currentHour = new Date().getHours();
                const isPeakHour = currentHour >= config.analysis.peakHoursStart && 
                                   currentHour < config.analysis.peakHoursEnd;
                
                if (isPeakHour) {
                    confidenceThreshold = config.analysis.peakHoursThreshold;
                }
            }
            
            // Khung gi·ªù kh√≥ khƒÉn, tƒÉng ng∆∞·ª°ng tin c·∫≠y
            if (isDifficult && config.betting.difficultPeriodHandling) {
                confidenceThreshold = Math.max(
                    confidenceThreshold,
                    config.betting.difficultPeriodHandling.confidenceThreshold
                );
                if (log) console.log(`üîÑ TƒÉng ng∆∞·ª°ng tin c·∫≠y l√™n ${confidenceThreshold.toFixed(2)} trong khung gi·ªù kh√≥ khƒÉn`);
            }
            
            // X·ª≠ l√Ω ƒë·∫∑c bi·ªát sau chu·ªói th·∫•t b·∫°i li√™n ti·∫øp
            if (config.betting && config.betting.confidenceAdjustment) {
                if (recentLosses >= 2) { // Gi·∫£m t·ª´ 3 xu·ªëng 2 ƒë·ªÉ ph·∫£n ·ª©ng s·ªõm h∆°n v·ªõi chu·ªói thua
                    // TƒÉng ng∆∞·ª°ng tin c·∫≠y sau chu·ªói thua
                    confidenceThreshold = Math.max(
                        confidenceThreshold, 
                        config.betting.minConfidenceAfterLoss || 0.75
                    );
                    
                    if (log) console.log(`üîÑ TƒÉng ng∆∞·ª°ng tin c·∫≠y l√™n ${confidenceThreshold.toFixed(2)} sau ${recentLosses} l·∫ßn thua li√™n ti·∫øp`);
                }
            }
            
            // L·ªçc d·ª± ƒëo√°n theo ng∆∞·ª°ng tin c·∫≠y
            const highConfidencePredictions = predictions.filter(p => p.confidence >= confidenceThreshold);
            
            // ∆Øu ti√™n c√°c ph∆∞∆°ng ph√°p c√≥ hi·ªáu qu·∫£ cao
            const priorityMethods = ["AdvancedCombination", "FastPatternDetector", "CyclicalPattern", "BetBreaker", "AdaptiveLearning"];
            
            // X√°c ƒë·ªãnh ph∆∞∆°ng ph√°p g√¢y ra chu·ªói thua (n·∫øu c√≥)
            let blacklistedMethod = null;
            if (recentLosses >= config.streakBreaker.maxConsecutiveFailures) {
                blacklistedMethod = getRecentFailedMethod(historyLogFile);
                if (blacklistedMethod && log) {
                    console.log(`‚ö†Ô∏è Ph√°t hi·ªán ph∆∞∆°ng ph√°p ${blacklistedMethod} g√¢y ra chu·ªói thua g·∫ßn ƒë√¢y`);
                }
            }
            
            // Theo d√µi n·∫øu c√≥ ph∆∞∆°ng ph√°p n√†o ƒë√£ b·ªã ƒë·∫£o ng∆∞·ª£c d·ª± ƒëo√°n
            let methodWasReversed = false;
            
            if (highConfidencePredictions.length > 0) {
                // T√≠nh to√°n ƒëi·ªÉm k·∫øt h·ª£p cho m·ªói d·ª± ƒëo√°n c√≥ ƒë·ªô tin c·∫≠y cao
                for (const prediction of highConfidencePredictions) {
                    const methodWeight = weights[prediction.method] || 0.1;
                    
                    // ƒêi·ªÅu ch·ªânh ∆∞u ti√™n d·ª±a tr√™n ph∆∞∆°ng ph√°p v√† chu·ªói thua
                    let priorityBonus = priorityMethods.includes(prediction.method) ? 0.1 : 0;
                    
                    // N·∫øu ph∆∞∆°ng ph√°p n·∫±m trong blacklist do g√¢y ra chu·ªói thua, gi·∫£m ∆∞u ti√™n
                    if (blacklistedMethod && prediction.method === blacklistedMethod && recentLosses > 1) {
                        priorityBonus -= 0.2; // Ph·∫°t n·∫∑ng n·∫øu ph∆∞∆°ng ph√°p g√¢y ra chu·ªói thua
                        if (log) console.log(`üîª Gi·∫£m ∆∞u ti√™n cho ph∆∞∆°ng ph√°p ${prediction.method} do g√¢y ra chu·ªói thua`);
                    }
                    
                    // M·ªõi: N·∫øu trong khung gi·ªù kh√≥ khƒÉn, tƒÉng ∆∞u ti√™n cho c√°c ph∆∞∆°ng ph√°p ph√¢n t√≠ch th·ªùi gian
                    if (isDifficult && (prediction.method === "TimeAnalysis" || prediction.method === "TimeBasedPattern")) {
                        priorityBonus += 0.15;
                        if (log) console.log(`üîº TƒÉng ∆∞u ti√™n cho ph∆∞∆°ng ph√°p ${prediction.method} trong khung gi·ªù kh√≥ khƒÉn`);
                    }
                    
                    // N·∫øu c√≥ chu·ªói thua v√† c·∫•u h√¨nh cho ph√©p ƒë·∫£o ng∆∞·ª£c, ƒë·∫£o ng∆∞·ª£c d·ª± ƒëo√°n
                    let adjustedPrediction = prediction.prediction;
                    let reversalApplied = false;
                    
                    // Ki·ªÉm tra ƒëi·ªÅu ki·ªán ƒë·ªÉ ƒë·∫£o ng∆∞·ª£c d·ª± ƒëo√°n sau chu·ªói thua
                    if (recentLosses >= config.streakBreaker.maxConsecutiveFailures && 
                        config.streakBreaker && 
                        config.streakBreaker.reverseAfterStreak) {
                        
                        // ƒê·∫£o ng∆∞·ª£c d·ª± ƒëo√°n c·ªßa t·∫•t c·∫£ c√°c ph∆∞∆°ng ph√°p ho·∫∑c ch·ªâ ph∆∞∆°ng ph√°p g√¢y ra chu·ªói thua
                        if (blacklistedMethod === null || prediction.method === blacklistedMethod) {
                            adjustedPrediction = !adjustedPrediction; // ƒê·∫£o ng∆∞·ª£c d·ª± ƒëo√°n
                            reversalApplied = true;
                            methodWasReversed = true;
                            
                            if (log) console.log(`üîÑ ƒê·∫£o ng∆∞·ª£c d·ª± ƒëo√°n c·ªßa ph∆∞∆°ng ph√°p ${prediction.method} t·ª´ ${prediction.prediction ? 'T√†i' : 'X·ªâu'} sang ${adjustedPrediction ? 'T√†i' : 'X·ªâu'}`);
                            
                            // Ghi log ƒë·∫£o ng∆∞·ª£c d·ª± ƒëo√°n
                            try {
                                const logFile = path.join(__dirname, '..', 'data', 'prediction_reversal_log.txt');
                                logger.logPredictionReversal(
                                    logFile,
                                    safeNextDrawId,
                                    prediction.method,
                                    prediction.prediction,
                                    adjustedPrediction,
                                    `${recentLosses} l·∫ßn thua li√™n ti·∫øp, ph∆∞∆°ng ph√°p th·∫•t b·∫°i: ${blacklistedMethod || 'Unknown'}`
                                );
                            } catch (logError) {
                                console.error(`‚ùå L·ªói khi ghi log ƒë·∫£o ng∆∞·ª£c: ${logError.message}`);
                            }
                        }
                    }
                    // Ki·ªÉm tra n·∫øu c·∫ßn duy tr√¨ h∆∞·ªõng d·ª± ƒëo√°n sau chu·ªói thua d√†i
                    else if (recentLosses >= config.streakBreaker.longLossThreshold && 
                             config.streakBreaker && 
                             config.streakBreaker.maintainDirectionAfterLosses) {
                        
                        // ƒê·ªëi v·ªõi chu·ªói thua d√†i, kh√¥ng ƒë·∫£o ng∆∞·ª£c m√† duy tr√¨ h∆∞·ªõng d·ª± ƒëo√°n
                        // Ki·ªÉm tra xem trong cache c√≥ d·ª± ƒëo√°n g·∫ßn ƒë√¢y hay kh√¥ng
                        const recentPredictionDirection = betBreaker.getPreviousPredictionDirection(historyLogFile);
                        
                        if (recentPredictionDirection !== null) {
                            // Duy tr√¨ c√πng h∆∞·ªõng d·ª± ƒëo√°n v·ªõi l·∫ßn g·∫ßn nh·∫•t
                            const isTai = recentPredictionDirection === 'T';
                            
                            // N·∫øu d·ª± ƒëo√°n hi·ªán t·∫°i kh√°c v·ªõi h∆∞·ªõng mu·ªën duy tr√¨, ƒë·∫£o ng∆∞·ª£c n√≥
                            if (prediction.prediction !== isTai) {
                                adjustedPrediction = isTai;
                                reversalApplied = true;
                                methodWasReversed = true;
                                
                                if (log) console.log(`üîÑ Duy tr√¨ h∆∞·ªõng d·ª± ƒëo√°n ${isTai ? 'T√†i' : 'X·ªâu'} sau ${recentLosses} l·∫ßn thua li√™n ti·∫øp`);
                                
                                // Ghi log
                                try {
                                    const logFile = path.join(__dirname, '..', 'data', 'prediction_direction_log.txt');
                                    logger.logPredictionReversal(
                                        logFile,
                                        safeNextDrawId,
                                        prediction.method,
                                        prediction.prediction,
                                        adjustedPrediction,
                                        `Duy tr√¨ h∆∞·ªõng d·ª± ƒëo√°n sau ${recentLosses} l·∫ßn thua li√™n ti·∫øp`
                                    );
                                } catch (logError) {
                                    console.error(`‚ùå L·ªói khi ghi log duy tr√¨ h∆∞·ªõng d·ª± ƒëo√°n: ${logError.message}`);
                                }
                            }
                        }
                    }
                    
                    // M·ªõi: ƒêi·ªÅu ch·ªânh ∆∞u ti√™n d·ª±a tr√™n hi·ªáu su·∫•t l·ªãch s·ª≠ c·ªßa ph∆∞∆°ng ph√°p
                    const successRate = getMethodSuccessRate(prediction.method);
                    let performanceBonus = 0;
                    
                    if (successRate > 0.6) {
                        performanceBonus = (successRate - 0.5) * 0.5; // Th∆∞·ªüng cho hi·ªáu su·∫•t t·ªët
                        if (log && performanceBonus > 0.05) {
                            console.log(`üìà TƒÉng ∆∞u ti√™n cho ${prediction.method} d·ª±a tr√™n hi·ªáu su·∫•t t·ªët (${Math.round(successRate * 100)}%)`);
                        }
                    }
                    
                    const combinedScore = prediction.confidence * (methodWeight + priorityBonus + performanceBonus);
                    
                    if (combinedScore > highestCombinedScore) {
                        highestCombinedScore = combinedScore;
                        finalPrediction = adjustedPrediction; // D√πng d·ª± ƒëo√°n ƒë√£ ƒëi·ªÅu ch·ªânh n·∫øu c·∫ßn
                        selectedMethod = prediction.method;
                        selectedReason = reversalApplied ? 
                            `${prediction.reason} (ƒë·∫£o ng∆∞·ª£c sau ${recentLosses} l·∫ßn thua)` : 
                            prediction.reason;
                    }
                }
            } else if (predictions.length > 0) {
                // N·∫øu kh√¥ng c√≥ d·ª± ƒëo√°n n√†o v∆∞·ª£t ng∆∞·ª°ng, ch·ªçn d·ª± ƒëo√°n c√≥ ƒëi·ªÉm k·∫øt h·ª£p cao nh·∫•t
                for (const prediction of predictions) {
                    const methodWeight = weights[prediction.method] || 0.1;
                    const combinedScore = prediction.confidence * methodWeight;
                    
                    if (combinedScore > highestCombinedScore) {
                        highestCombinedScore = combinedScore;
                        finalPrediction = prediction.prediction;
                        selectedMethod = prediction.method;
                        selectedReason = prediction.reason;
                    }
                }
                
                if (log) console.log(`‚ö†Ô∏è Kh√¥ng c√≥ d·ª± ƒëo√°n n√†o v∆∞·ª£t ng∆∞·ª°ng tin c·∫≠y ${confidenceThreshold.toFixed(2)}, ch·ªçn d·ª± ƒëo√°n t·ªët nh·∫•t`);
            } else {
                if (log) console.log("‚ùå Kh√¥ng c√≥ d·ª± ƒëo√°n n√†o t·ª´ c√°c thu·∫≠t to√°n");
                return null;
            }
            
            // M·ªõi: Ki·ªÉm tra hi·ªáu su·∫•t g·∫ßn ƒë√¢y ƒë·ªÉ quy·∫øt ƒë·ªãnh c√≥ n√™n ƒë·∫∑t c∆∞·ª£c hay kh√¥ng
            let shouldSkipBet = false;
            const recentAccuracy = calculateRecentAccuracy(historyLogFile);
            
            if (config.betting.difficultPeriodHandling && config.betting.difficultPeriodHandling.enabled) {
                if (recentAccuracy < config.betting.difficultPeriodHandling.minAccuracyToBet) {
                    if (log) console.log(`‚ö†Ô∏è Hi·ªáu su·∫•t g·∫ßn ƒë√¢y qu√° th·∫•p (${Math.round(recentAccuracy * 100)}%), b·ªè qua ƒë·∫∑t c∆∞·ª£c`);
                    shouldSkipBet = true;
                }
            }
            
            // T·∫°o ƒë·ªëi t∆∞·ª£ng d·ª± ƒëo√°n cu·ªëi c√πng
            const predictedNumbers = predictor.generateNumbers(finalPrediction, index);
            const predictedValue = predictedNumbers[index]; // L·∫•y gi√° tr·ªã d·ª± ƒëo√°n t·∫°i v·ªã tr√≠ index
            
            const result = {
                drawId: safeNextDrawId,
                timestamp: new Date().toISOString(),
                doanTaiXiu: finalPrediction ? 'T√†i' : 'X·ªâu', // Th√™m tr∆∞·ªùng m·ªõi hi·ªÉn th·ªã r√µ r√†ng d·ª± ƒëo√°n T√†i/X·ªâu 
                prediction: finalPrediction, // Gi·ªØ l·∫°i ƒë·ªÉ t∆∞∆°ng th√≠ch ng∆∞·ª£c
                method: selectedMethod,
                confidence: highestCombinedScore,
                reason: selectedReason,
                numbers: predictedNumbers,
                predictedValue: predictedValue, // S·ªë d·ª± ƒëo√°n t·∫°i v·ªã tr√≠ index
                targetIndex: index, // Gi·ªØ l·∫°i v√¨ quan tr·ªçng ƒë·ªÉ bi·∫øt v·ªã tr√≠ n√†o ƒëang d·ª± ƒëo√°n
                timeSegment: currentTimeSegment
            };
            
            // Th√™m ti·ªÅn c∆∞·ª£c n·∫øu c√≥ ƒëƒÉng nh·∫≠p v√† ƒë∆∞·ª£c ph√©p c∆∞·ª£c
            if (isLoggedIn && canBet && !shouldSkipBet) {
                const baseAmount = betting.calculateBetAmount(accountInfo, result.confidence, recentLosses);
                
                // ƒêi·ªÅu ch·ªânh s·ªë ti·ªÅn c∆∞·ª£c d·ª±a tr√™n ƒë·ªô tin c·∫≠y v√† c√°c y·∫øu t·ªë kh√°c
                let adjustedAmount = baseAmount;
                
                // Gi·∫£m m·ª©c c∆∞·ª£c n·∫øu ƒëang trong khung gi·ªù kh√≥ khƒÉn
                if (isDifficult && config.betting.difficultPeriodHandling && 
                    config.betting.difficultPeriodHandling.betAmountMultiplier) {
                    adjustedAmount = Math.floor(adjustedAmount * config.betting.difficultPeriodHandling.betAmountMultiplier);
                    if (log) console.log(`üí∞ ƒêi·ªÅu ch·ªânh m·ª©c c∆∞·ª£c trong khung gi·ªù kh√≥ khƒÉn: ${adjustedAmount}`);
                }
                
                result.betAmount = adjustedAmount;
            }
            
            // L∆∞u d·ª± ƒëo√°n g·∫ßn ƒë√¢y nh·∫•t v√†o b·ªô nh·ªõ (cho logic internal)
            lastPredictionData = {
                prediction: finalPrediction,
                confidence: highestCombinedScore,
                timestamp: Date.now()
            };
            
            // L∆∞u k·∫øt qu·∫£ d·ª± ƒëo√°n v√†o file predictions.json
            try {
                fs.writeFileSync(predictionsFile, JSON.stringify(result, null, 2), 'utf8');
                if (log) console.log(`‚úÖ ƒê√£ l∆∞u d·ª± ƒëo√°n v√†o file: ${predictionsFile}`);
            } catch (error) {
                console.error(`‚ùå L·ªói khi l∆∞u d·ª± ƒëo√°n: ${error.message}`);
            }
            
            return result;
        } catch (error) {
            console.error("‚ùå L·ªói trong qu√° tr√¨nh d·ª± ƒëo√°n:", error);
            return null;
        }
    } catch (error) {
        console.error("‚ùå L·ªói ngo√†i trong h√†m predict:", error);
        return null;
    }
}

/**
 * T√≠nh s·ªë l·∫ßn thua li√™n ti·∫øp g·∫ßn ƒë√¢y t·ª´ file log
 * @param {string} logFile - ƒê∆∞·ªùng d·∫´n ƒë·∫øn file log
 * @returns {number} S·ªë l·∫ßn thua li√™n ti·∫øp
 */
function calculateRecentLosses(logFile) {
    try {
        if (!fs.existsSync(logFile)) return 0;
        
        const data = fs.readFileSync(logFile, 'utf8');
        const lines = data.split('\n').filter(line => line.trim() !== '');
        
        let consecutiveLosses = 0;
        
        // ƒê·ªçc t·ª´ d√≤ng m·ªõi nh·∫•t (tr√™n c√πng) xu·ªëng
        for (const line of lines) {
            if (line.includes('| Sai |')) {
                consecutiveLosses++;
            } else if (line.includes('| ƒê√∫ng |')) {
                break; // D·ª´ng khi g·∫∑p k·∫øt qu·∫£ ƒë√∫ng
            }
        }
        
        return consecutiveLosses;
    } catch (error) {
        console.error(`L·ªói khi ƒë·ªçc log: ${error.message}`);
        return 0;
    }
}

/**
 * L·∫•y ph∆∞∆°ng ph√°p g√¢y ra chu·ªói thua g·∫ßn ƒë√¢y
 * @param {string} logFile - ƒê∆∞·ªùng d·∫´n ƒë·∫øn file log
 * @returns {string|null} T√™n ph∆∞∆°ng ph√°p ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y
 */
function getRecentFailedMethod(logFile) {
    try {
        if (!fs.existsSync(logFile)) return null;
        
        const data = fs.readFileSync(logFile, 'utf8');
        const lines = data.split('\n').filter(line => line.trim() !== '');
        
        // Ch·ªâ xem x√©t c√°c d√≤ng th·∫•t b·∫°i g·∫ßn ƒë√¢y
        for (const line of lines) {
            if (line.includes('| Sai |')) {
                // Tr√≠ch xu·∫•t ph∆∞∆°ng ph√°p t·ª´ d√≤ng log
                const methodMatch = line.match(/\| Ph∆∞∆°ng ph√°p: (\w+) \|/);
                if (methodMatch && methodMatch[1]) {
                    return methodMatch[1];
                }
                break; // Ch·ªâ l·∫•y ph∆∞∆°ng ph√°p t·ª´ l·∫ßn thua g·∫ßn nh·∫•t
            } else if (line.includes('| ƒê√∫ng |')) {
                break; // D·ª´ng khi g·∫∑p k·∫øt qu·∫£ ƒë√∫ng
            }
        }
        
        return null;
    } catch (error) {
        console.error(`L·ªói khi ƒë·ªçc log ƒë·ªÉ l·∫•y ph∆∞∆°ng ph√°p: ${error.message}`);
        return null;
    }
}

/**
 * X√°c th·ª±c k·∫øt qu·∫£ d·ª± ƒëo√°n so v·ªõi s·ªë th·ª±c t·∫ø
 * @param {Object} prediction - D·ª± ƒëo√°n ƒë√£ ƒë∆∞a ra
 * @param {Array} actualNumbers - C√°c s·ªë th·ª±c t·∫ø
 * @returns {Object} K·∫øt qu·∫£ x√°c th·ª±c
 */
function verifyPrediction(prediction, actualNumbers) {
    if (!prediction || !actualNumbers) return;
    
    const targetIndex = prediction.targetIndex || 0;
    let predictedTai, predictedType;
    
    // X√°c ƒë·ªãnh lo·∫°i d·ª± ƒëo√°n (T√†i/X·ªâu)
    if (prediction.predictionType) {
        // S·ª≠ d·ª•ng tr∆∞·ªùng predictionType n·∫øu c√≥
        predictedType = prediction.predictionType;
        predictedTai = (predictedType === 'T√†i');
    } else if (prediction.predictTai !== undefined) {
        // S·ª≠ d·ª•ng tr∆∞·ªùng predictTai c≈© n·∫øu kh√¥ng c√≥ predictionType
        predictedTai = prediction.predictTai;
        predictedType = predictedTai ? 'T√†i' : 'X·ªâu';
    } else {
        // N·∫øu kh√¥ng c√≥ c·∫£ hai, x√°c ƒë·ªãnh t·ª´ predictionNumber
        const predictionNumber = prediction.predictionNumber || prediction.numbers[targetIndex];
        predictedTai = (predictionNumber >= 5);
        predictedType = predictedTai ? 'T√†i' : 'X·ªâu';
    }
    
    const predictedNumber = prediction.predictionNumber || prediction.numbers[targetIndex];
    
    const actualNumber = actualNumbers[targetIndex];
    const actualTai = actualNumber >= 5;
    const actualType = actualTai ? 'T√†i' : 'X·ªâu';
    
    const isCorrect = predictedTai === actualTai;
    
    // Ghi log v·ªõi th√¥ng tin chi ti·∫øt h∆°n
    const now = new Date();
    const timestamp = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}:${now.getSeconds().toString().padStart(2, '0')} ${now.getDate()}/${now.getMonth() + 1}/${now.getFullYear()}`;
    const logEntry = `[${timestamp}] - ${prediction.drawId} - D·ª± ƒëo√°n: ${predictedNumber} (${predictedType}) | S·ªë th·ª±c t·∫ø: ${actualNumber} (${actualType}) | ${isCorrect ? 'ƒê√∫ng ‚úì' : 'Sai ‚úó'} | Ph∆∞∆°ng ph√°p: ${prediction.method} | V·ªã tr√≠: ${targetIndex} | Phi√™n b·∫£n: ${prediction.version || 'unknown'}`;
    
    // Th∆∞ m·ª•c l∆∞u tr·ªØ
    const dataDir = path.join(__dirname, '..', 'data');
    if (!fs.existsSync(dataDir)) {
        console.log(`üìÅ T·∫°o th∆∞ m·ª•c data m·ªõi t·ª´ verifyPrediction`);
        fs.mkdirSync(dataDir, { recursive: true });
    }
    
    // ƒê∆∞·ªùng d·∫´n file log
    const logFile = path.join(dataDir, 'prediction_log.txt');
    
    // Ki·ªÉm tra v√† c·∫≠p nh·∫≠t log
    try {
        let existingLog = '';
        let existingLines = [];
        let foundExisting = false;
        let updatedContent = '';
        
        if (fs.existsSync(logFile)) {
            existingLog = fs.readFileSync(logFile, 'utf8');
            existingLines = existingLog.split('\n');
            
            // Tr∆∞·ªõc ti√™n ki·ªÉm tra xem DrawID n√†y ƒë√£ c√≥ k·∫øt qu·∫£ trong log ch∆∞a
            const hasCompletedResult = existingLog.includes(`- ${prediction.drawId} -`) && 
                                      existingLog.includes(`S·ªë th·ª±c t·∫ø: ${actualNumber}`) && 
                                      (existingLog.includes(`ƒê√∫ng ‚úì`) || existingLog.includes(`Sai ‚úó`));
            
            if (hasCompletedResult) {
                console.log(`‚ö†Ô∏è K·∫øt qu·∫£ cho DrawID ${prediction.drawId} ƒë√£ t·ªìn t·∫°i trong log, kh√¥ng ghi l·∫°i.`);
                // V·∫´n hi·ªÉn th·ªã k·∫øt qu·∫£ nh∆∞ng kh√¥ng ghi log
                console.log(`‚úÖ K·∫øt qu·∫£ d·ª± ƒëo√°n: DrawID ${prediction.drawId}`);
                console.log(`üìä S·ªë d·ª± ƒëo√°n: ${predictedNumber} (${predictedType}) | Th·ª±c t·∫ø: ${actualNumber} (${actualType})`);
                console.log(`${isCorrect ? 'üü¢ ƒê√öNG' : 'üî¥ SAI'} | Ph∆∞∆°ng ph√°p: ${prediction.method}`);
                return;
            }
            
            // Ki·ªÉm tra c√≥ d√≤ng d·ª± ƒëo√°n ch∆∞a c√≥ k·∫øt qu·∫£ kh√¥ng
            for (let i = 0; i < existingLines.length; i++) {
                const line = existingLines[i];
                // T√¨m d√≤ng ch·ª©a DrawID v√† ch∆∞a c√≥ ph·∫ßn "S·ªë th·ª±c t·∫ø"
                if (line.includes(`- ${prediction.drawId} -`) && line.includes(`D·ª± ƒëo√°n:`) && !line.includes(`S·ªë th·ª±c t·∫ø:`)) {
                    // T√¨m th·∫•y d√≤ng c·∫ßn c·∫≠p nh·∫≠t
                    foundExisting = true;
                    
                    // T·∫°o d√≤ng m·ªõi ch·ª©a k·∫øt qu·∫£
                    const resultInfo = `S·ªë th·ª±c t·∫ø: ${actualNumber} (${actualType}) | ${isCorrect ? 'ƒê√∫ng ‚úì' : 'Sai ‚úó'} | `;
                    // T√¨m v·ªã tr√≠ ƒë·ªÉ ch√®n k·∫øt qu·∫£ v√†o (tr∆∞·ªõc "Ph∆∞∆°ng ph√°p:")
                    const updatedLine = line.replace('Ph∆∞∆°ng ph√°p:', `${resultInfo}Ph∆∞∆°ng ph√°p:`);
                    existingLines[i] = updatedLine;
                    
                    console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t k·∫øt qu·∫£ cho DrawID ${prediction.drawId}: ${isCorrect ? 'ƒê√öNG ‚úì' : 'SAI ‚úó'}`);
                    break;
                }
            }
            
            // N·∫øu t√¨m th·∫•y d√≤ng ƒë·ªÉ c·∫≠p nh·∫≠t, ghi l·∫°i n·ªôi dung m·ªõi
            if (foundExisting) {
                updatedContent = existingLines.join('\n');
                fs.writeFileSync(logFile, updatedContent, 'utf8');
            } else {
                // N·∫øu kh√¥ng t√¨m th·∫•y, th√™m m·ªõi v√†o ƒë·∫ßu file
                fs.writeFileSync(logFile, logEntry + '\n' + existingLog, { encoding: 'utf8' });
                console.log(`‚úÖ ƒê√£ th√™m m·ªõi k·∫øt qu·∫£ d·ª± ƒëo√°n cho DrawID ${prediction.drawId} v√†o log.`);
            }
        } else {
            // N·∫øu file ch∆∞a t·ªìn t·∫°i, t·∫°o m·ªõi v√† ghi log
            fs.writeFileSync(logFile, logEntry + '\n', { encoding: 'utf8' });
            console.log(`‚úÖ ƒê√£ t·∫°o file log m·ªõi v·ªõi k·∫øt qu·∫£ DrawID ${prediction.drawId}.`);
        }
        
        // Hi·ªÉn th·ªã k·∫øt qu·∫£ chi ti·∫øt
        if (!foundExisting) {
            console.log(`‚úÖ K·∫øt qu·∫£ d·ª± ƒëo√°n: DrawID ${prediction.drawId}`);
            console.log(`üìä S·ªë d·ª± ƒëo√°n: ${predictedNumber} (${predictedType}) | Th·ª±c t·∫ø: ${actualNumber} (${actualType})`);
            console.log(`${isCorrect ? 'üü¢ ƒê√öNG' : 'üî¥ SAI'} | Ph∆∞∆°ng ph√°p: ${prediction.method}`);
        }
        
        // C·∫≠p nh·∫≠t cache hi·ªáu su·∫•t ph∆∞∆°ng ph√°p
        if (global.updateMethodPerformance) {
            global.updateMethodPerformance(prediction.method, isCorrect);
        }
        
        // C·∫≠p nh·∫≠t d·ªØ li·ªáu d·ª± ƒëo√°n g·∫ßn ƒë√¢y cho thu·∫≠t to√°n AdaptivePattern
        if (typeof updateRecentPredictions === 'function') {
            updateRecentPredictions(prediction, isCorrect);
        }
        
        // C·∫≠p nh·∫≠t th·ªëng k√™ x·ª≠ l√Ω b·ªát t√†i/x·ªâu (n·∫øu √°p d·ª•ng)
        if (prediction.analysisMetrics && prediction.analysisMetrics.betStreakDetected) {
            betBreaker.updateBetPerformance({
                betStreak: true,
                streakType: prediction.analysisMetrics.betStreakType,
                streakLength: prediction.analysisMetrics.betStreakLength,
                method: prediction.method
            }, isCorrect);
        }
        
        // Tr·∫£ v·ªÅ k·∫øt qu·∫£ ƒë·ªÉ c√≥ th·ªÉ s·ª≠ d·ª•ng ·ªü n∆°i g·ªçi h√†m
        return {
            isCorrect,
            actualNumber,
            actualType,
            predictedNumber,
            predictedType
        };
        
    } catch (error) {
        console.error(`‚ùå L·ªói khi ghi log: ${error.message}`);
        return null;
    }
}

/**
 * C·∫≠p nh·∫≠t t·∫•t c·∫£ c√°c d·ª± ƒëo√°n c≈© ƒëang ch·ªù k·∫øt qu·∫£
 * @param {Array} history - L·ªãch s·ª≠ k·∫øt qu·∫£ m·ªõi nh·∫•t
 * @param {boolean} log - B·∫≠t ch·∫ø ƒë·ªô log (m·∫∑c ƒë·ªãnh: true)
 * @returns {boolean} - K·∫øt qu·∫£ th·ª±c hi·ªán
 */
function updateAllPendingPredictions(history, log = true) {
    try {
        if (!history || !Array.isArray(history) || history.length === 0) {
            if (log) console.log('‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu l·ªãch s·ª≠ ƒë·ªÉ c·∫≠p nh·∫≠t c√°c d·ª± ƒëo√°n ƒëang ch·ªù k·∫øt qu·∫£');
            return false;
        }

        const dataDir = path.join(__dirname, '..', 'data');
        if (!fs.existsSync(dataDir)) {
            if (log) console.log(`üìÅ T·∫°o th∆∞ m·ª•c data m·ªõi t·ª´ updateAllPendingPredictions`);
            fs.mkdirSync(dataDir, { recursive: true });
        }
        
        const logFile = path.join(dataDir, 'prediction_log.txt');

        if (!fs.existsSync(logFile)) {
            if (log) console.log('‚ö†Ô∏è Ch∆∞a c√≥ file log d·ª± ƒëo√°n');
            return false;
        }

        // ƒê·ªçc n·ªôi dung file log
        const logContent = fs.readFileSync(logFile, 'utf8');
        const logLines = logContent.split('\n').filter(line => line.trim() !== '');

        // T√¨m c√°c d√≤ng ch∆∞a c√≥ k·∫øt qu·∫£ (kh√¥ng c√≥ "ƒê√∫ng ‚úì" ho·∫∑c "Sai ‚úó")
        const pendingLines = logLines.filter(line => 
            !line.includes('ƒê√∫ng ‚úì') && 
            !line.includes('Sai ‚úó') && 
            !line.includes('S·ªë th·ª±c t·∫ø:') && 
            line.includes('D·ª± ƒëo√°n:')
        );

        if (pendingLines.length === 0) {
            if (log) console.log('‚ÑπÔ∏è Kh√¥ng c√≥ d·ª± ƒëo√°n n√†o c·∫ßn c·∫≠p nh·∫≠t k·∫øt qu·∫£');
            return true;
        }

        let updatedCount = 0;
        let updatedLogContent = logContent;

        // Duy·ªát qua t·ª´ng d√≤ng c·∫ßn c·∫≠p nh·∫≠t
        for (const line of pendingLines) {
            // Tr√≠ch xu·∫•t DrawID t·ª´ d√≤ng log
            const drawIdMatch = line.match(/- ([0-9_]+) -/);
            if (!drawIdMatch) continue;

            const drawId = drawIdMatch[1];
            const normalizedDrawId = drawIdModule.normalizeDrawId(drawId);

            // T√¨m k·∫øt qu·∫£ t∆∞∆°ng ·ª©ng trong history
            const matchingResult = history.find(h => {
                const historyDrawId = drawIdModule.normalizeDrawId(h.drawId);
                return historyDrawId === normalizedDrawId || h.drawId === drawId;
            });

            // Ki·ªÉm tra c√≥ t√¨m th·∫•y k·∫øt qu·∫£ v√† k·∫øt qu·∫£ c√≥ m·∫£ng numbers h·ª£p l·ªá kh√¥ng
            if (!matchingResult || !matchingResult.numbers || !Array.isArray(matchingResult.numbers)) {
                if (log) console.log(`‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ h·ª£p l·ªá cho DrawID ${drawId}`);
                continue;
            }

            // Tr√≠ch xu·∫•t th√¥ng tin d·ª± ƒëo√°n
            const predictionMatch = line.match(/D·ª± ƒëo√°n: (\d+) \((T√†i|X·ªâu)\)/);
            if (!predictionMatch) continue;

            const predictedNumber = parseInt(predictionMatch[1]);
            const predictedType = predictionMatch[2];
            const predictedTai = predictedType === 'T√†i';

            // L·∫•y th√¥ng tin ph∆∞∆°ng ph√°p v√† v·ªã tr√≠
            const methodMatch = line.match(/Ph∆∞∆°ng ph√°p: (\w+)/);
            const method = methodMatch ? methodMatch[1] : 'Unknown';

            const indexMatch = line.match(/V·ªã tr√≠: (\d+)/);
            const index = indexMatch ? parseInt(indexMatch[1]) : 0;
            
            // Ki·ªÉm tra xem index c√≥ n·∫±m trong ph·∫°m vi c·ªßa m·∫£ng numbers kh√¥ng
            if (index >= matchingResult.numbers.length) {
                if (log) console.log(`‚ÑπÔ∏è V·ªã tr√≠ ${index} kh√¥ng h·ª£p l·ªá cho k·∫øt qu·∫£ c·ªßa DrawID ${drawId}`);
                continue;
            }

            // X√°c ƒë·ªãnh k·∫øt qu·∫£ th·ª±c t·∫ø
            const actualNumber = matchingResult.numbers[index];
            const actualTai = actualNumber >= 5;
            const actualType = actualTai ? 'T√†i' : 'X·ªâu';
            
            // Ki·ªÉm tra k·∫øt qu·∫£ ƒë√∫ng/sai
            const isCorrect = predictedTai === actualTai;
            
            // T·∫°o ph·∫ßn c·∫≠p nh·∫≠t k·∫øt qu·∫£
            const resultText = `S·ªë th·ª±c t·∫ø: ${actualNumber} (${actualType}) | ${isCorrect ? 'ƒê√∫ng ‚úì' : 'Sai ‚úó'}`;
            
            // T·∫°o d√≤ng log c·∫≠p nh·∫≠t
            const updatedLine = line.replace(/Ph∆∞∆°ng ph√°p:/, `${resultText} | Ph∆∞∆°ng ph√°p:`);
            
            // C·∫≠p nh·∫≠t n·ªôi dung log
            updatedLogContent = updatedLogContent.replace(line, updatedLine);
            
            // C·∫≠p nh·∫≠t cache hi·ªáu su·∫•t ph∆∞∆°ng ph√°p
            if (global.updateMethodPerformance) {
                global.updateMethodPerformance(method, isCorrect);
            }
            
            updatedCount++;
            if (log) console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t k·∫øt qu·∫£ cho DrawID ${drawId}: ${isCorrect ? 'ƒê√öNG ‚úì' : 'SAI ‚úó'}`);
        }

        // Ghi l·∫°i file log n·∫øu c√≥ c·∫≠p nh·∫≠t
        if (updatedCount > 0) {
            fs.writeFileSync(logFile, updatedLogContent, 'utf8');
            if (log) console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t t·ªïng c·ªông ${updatedCount}/${pendingLines.length} d·ª± ƒëo√°n`);
        } else {
            if (log) console.log('‚ÑπÔ∏è Kh√¥ng c√≥ d·ª± ƒëo√°n n√†o ƒë∆∞·ª£c c·∫≠p nh·∫≠t (kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ t∆∞∆°ng ·ª©ng)');
        }

        return true;
    } catch (error) {
        if (log) console.error(`‚ùå L·ªói khi c·∫≠p nh·∫≠t c√°c d·ª± ƒëo√°n ƒëang ch·ªù: ${error.message}`);
        return false;
    }
}

/**
 * L·∫•y h∆∞·ªõng d·ª± ƒëo√°n t·ª´ log g·∫ßn ƒë√¢y nh·∫•t
 * @param {string} logFile - ƒê∆∞·ªùng d·∫´n ƒë·∫øn file log
 * @returns {boolean|null} true cho T√†i, false cho X·ªâu, null n·∫øu kh√¥ng t√¨m th·∫•y
 */
function getPreviousPredictionDirection(logFile) {
    try {
        if (!fs.existsSync(logFile)) return null;
        
        const data = fs.readFileSync(logFile, 'utf8');
        const lines = data.split('\n').filter(line => line.trim() !== '');
        
        // Ch·ªâ l·∫•y d√≤ng g·∫ßn nh·∫•t
        if (lines.length > 0) {
            const lastLine = lines[0]; // D√≤ng ƒë·∫ßu ti√™n l√† g·∫ßn nh·∫•t
            
            // T√¨m lo·∫°i d·ª± ƒëo√°n
            const predictionMatch = lastLine.match(/D·ª± ƒëo√°n: \d+ \((T√†i|X·ªâu)\)/);
            if (predictionMatch && predictionMatch[1]) {
                return predictionMatch[1] === 'T√†i';
            }
        }
        
        return null;
    } catch (error) {
        console.error(`L·ªói khi ƒë·ªçc log ƒë·ªÉ l·∫•y h∆∞·ªõng d·ª± ƒëo√°n: ${error.message}`);
        return null;
    }
}

// T·∫°o c√°c h√†m to√†n c·ª•c ƒë·ªÉ c√°c module kh√°c c√≥ th·ªÉ truy c·∫≠p
global.verifyPrediction = verifyPrediction;
global.updateMethodPerformance = updateMethodPerformance;
global.getMethodSuccessRate = getMethodSuccessRate;

// Export c√°c h√†m c·∫ßn thi·∫øt
module.exports = {
    predict,
    verifyPrediction,
    updateMethodPerformance,
    getMethodSuccessRate,
    updateAllPendingPredictions,
    getPreviousPredictionDirection
};