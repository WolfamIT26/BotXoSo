const fs = require('fs');

/**
 * T√≠nh to√°n drawId ti·∫øp theo an to√†n, lu√¥n ch·ªâ tƒÉng 1 ƒë∆°n v·ªã t·ª´ hi·ªán t·∫°i
 */
function normalizeDrawId(drawId) {
    if (!drawId) return drawId;
    return drawId.replace(/_\d+$/, '');
}

/**
 * T·∫°o drawId ti·∫øp theo t·ª´ drawId hi·ªán t·∫°i
 * @param {string} currentDrawId - DrawID hi·ªán t·∫°i
 * @returns {string} DrawID ti·∫øp theo
 */
function generateNextDrawId(currentDrawId) {
    if (!currentDrawId) return null;
    
    // Chu·∫©n h√≥a currentDrawId (lo·∫°i b·ªè h·∫≠u t·ªë _1, _2, v.v n·∫øu c√≥)
    const normalizedDrawId = normalizeDrawId(currentDrawId);
    
    // L·∫•y s·ªë cu·ªëi c√πng c·ªßa currentDrawId v√† tƒÉng l√™n 1
    const currentNumber = parseInt(normalizedDrawId.slice(-4));
    const nextNumber = currentNumber + 1;
    
    // Gi·ªØ nguy√™n ph·∫ßn prefix c·ªßa DrawID
    const prefix = normalizedDrawId.slice(0, -4);
    
    // Format s·ªë m·ªõi v·ªõi ƒë√∫ng 4 ch·ªØ s·ªë v√† th√™m v√†o prefix
    const nextDrawId = prefix + nextNumber.toString().padStart(4, '0');
    
    return nextDrawId;
}

function calculateSafeNextDrawId(currentDrawId, predictionsFile, historyLogFile) {
    // Chu·∫©n h√≥a currentDrawId (lo·∫°i b·ªè h·∫≠u t·ªë _1, _2, v.v n·∫øu c√≥)
    currentDrawId = currentDrawId.replace(/_\d+$/, '');
    
    // L·∫•y s·ªë cu·ªëi c√πng c·ªßa currentDrawId v√† tƒÉng l√™n 1
    const currentNumber = parseInt(currentDrawId.slice(-4));
    let nextNumber = currentNumber + 1;
    
    // Gi·ªØ nguy√™n ph·∫ßn prefix c·ªßa DrawID
    const prefix = currentDrawId.slice(0, -4);
    
    // Ki·ªÉm tra predictions.json hi·ªán t·∫°i
    let existingDrawId = null;
    if (predictionsFile) {
        if (!fs.existsSync(predictionsFile)) {
            // T·∫°o file r·ªóng n·∫øu ch∆∞a t·ªìn t·∫°i
            try {
                fs.writeFileSync(predictionsFile, '{}', 'utf8');
                console.log(`üìÑ File d·ª± ƒëo√°n kh√¥ng t·ªìn t·∫°i, t·∫°o file m·ªõi: ${predictionsFile}`);
            } catch (error) {
                console.error(`‚ùå L·ªói khi t·∫°o file predictions.json: ${error.message}`);
            }
        }
        
        // Ti·∫øp t·ª•c v·ªõi file ƒë√£ t·ªìn t·∫°i ho·∫∑c m·ªõi t·∫°o
        if (fs.existsSync(predictionsFile)) {
            try {
                const predictions = JSON.parse(fs.readFileSync(predictionsFile, 'utf8'));
                if (predictions && predictions.drawId) {
                    existingDrawId = predictions.drawId.replace(/_\d+$/, '');
                    const existingNumber = parseInt(existingDrawId.slice(-4));
                    
                    // N·∫øu ƒë√£ c√≥ d·ª± ƒëo√°n cho k·ª≥ ti·∫øp theo ho·∫∑c cao h∆°n, tƒÉng th√™m 1
                    if (existingNumber >= nextNumber) {
                        nextNumber = existingNumber + 1;
                    }
                }
            } catch (error) {
                console.error(`‚ùå L·ªói khi ƒë·ªçc predictions.json: ${error.message}`);
            }
        }
    }
    
    // Ki·ªÉm tra prediction_log.txt ƒë·ªÉ tr√°nh tr√πng l·∫∑p
    if (historyLogFile && fs.existsSync(historyLogFile)) {
        try {
            const logContent = fs.readFileSync(historyLogFile, 'utf8');
            const logLines = logContent.split('\n');
            
            // L·∫•y d√≤ng cu·ªëi c√πng c√≥ n·ªôi dung
            for (let i = logLines.length - 1; i >= 0; i--) {
                if (logLines[i].trim()) {
                    const match = logLines[i].match(/] - (\d+) -/);
                    if (match && match[1]) {
                        const lastLoggedId = match[1];
                        const lastLoggedNumber = parseInt(lastLoggedId.slice(-4));
                        
                        // N·∫øu log ƒë√£ c√≥ k·ª≥ ti·∫øp theo ho·∫∑c cao h∆°n, tƒÉng th√™m 1
                        if (lastLoggedNumber >= nextNumber) {
                            console.log(`‚ÑπÔ∏è Ph√°t hi·ªán log ƒë√£ c√≥ k·ª≥ ${lastLoggedId}, tƒÉng nextNumber`);
                            nextNumber = lastLoggedNumber + 1;
                        }
                        break;
                    }
                }
            }
        } catch (error) {
            console.error(`‚ùå L·ªói khi ƒë·ªçc prediction_log.txt: ${error.message}`);
        }
    }
    
    const nextDrawId = prefix + nextNumber.toString().padStart(4, '0');
    return nextDrawId;
}

module.exports = {
    calculateSafeNextDrawId,
    normalizeDrawId,
    generateNextDrawId
};